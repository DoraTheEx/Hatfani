
SNMP:
פרוטוקול מבוסס UDP המשמש לניהול רשתות. מאפשר ללקוחות לשאול נתונים ממכשירים (SNMP agents) ולשלוט בהם. משמש לניטור וניהול התקנים ברשת, איסוף נתונים סטטיסטיים, קבלת התראות על תקלות ותיקון תקלות.

עבודה:

SNMP משתמש במודל לקוח-שרת.
הלקוח שולח בקשות לשרת (SNMP agent) לקבלת נתונים או שליטה בהתקן.
השרת מחזיר תגובות עם הנתונים המבוקשים או אישור ביצוע פעולה.
SNMP משתמש ב-PDU (Protocol Data Unit) להעברת נתונים.
PDU מורכב מכותרת ונתונים.
הכותרת מכילה מידע על סוג ה-PDU, מזהה בקשה/תגובה, קוד שגיאה ועוד.
הנתונים מכילים את המידע הספציפי לבקשה/תגובה.
SNMP תומך במגוון רחב של פעולות, כגון:
GET: בקשת נתונים מהשרת.
SET: שינוי נתונים בשרת.
TRAP: שליחת הודעה על אירוע חריג מהשרת ללקוח.
טכני:

SNMP פועל על גבי UDP (port 161).
SNMPv1 ו-SNMPv2 אינם מאובטחים.
SNMPv3 מאובטח באמצעות SHA ו-AES.
NTP:
פרוטוקול מבוסס UDP המשמש לסנכרון שעונים בין מחשבים ברשת. שומר על זמן אחיד בין כל המחשבים ברשת, דבר חשוב עבור יישומים רבים כגון שירותי אינטרנט, אבטחה ועוד.

עבודה:

NTP משתמש במודל לקוח-שרת.
הלקוח שולח בקשות לשרת (NTP server) לקבלת זמן מדויק.
השרת מחזיר תגובות עם זמן מדויק.
NTP משתמש ב-timestamps להעברת זמן.
timestamp הוא מספר המציין את מספר הסקנדים שחלפו מאז 01/01/1970.
NTP משתמש באלגוריתמים מיוחדים להתמודדות עם עיכובים ושינויים ברשת.
טכני:

NTP פועל על גבי UDP (port 123).
NTP משתמש ב-Stratum levels להגדרת היררכיה של שרתים.
Stratum 1: שרתים המקבלים זמן ממקור חיצוני (כגון שעון אטומי).
Stratum 2: שרתים מסונכרנים עם שרתים Stratum 1.
וכך הלאה.
HTTPS:
פרוטוקול שכבה עליונה (application layer) הפועל מעל HTTP. HTTPS משתמש ב-TLS/SSL להצפנת נתונים. TLS/SSL משתמש במפתחות סימטריים וא-סימטריים להצפנה ופענוח נתונים. מפתח סימטרי משמש להצפנת נתונים במהלך התקשורת. מפתח א-סימטרי משמש לאימות זהות הצדדים. HTTPS משתמש ב-certificates להעברת מפתחות ציבוריים. certificates חתומים על ידי גורם מוסמך (CA).

טכני:

HTTPS פועל על גבי TCP (port 443).
HTTPS תומך במגוון רחב של צופן (ciphers) ואלגוריתמי Hash.
TLSv1.3 הוא הגרסה האחרונה של TLS.
RPC:
פרוטוקול המאפשר הפעלת פונקציות על מחשב מרוחק כאילו הן פועלות על המחשב המקומי. יוצר ממשק אחיד להפעלת פונקציות מרוחקות, דבר המאפשר פיתוח יישומים מבוזרים.

עבודה:

RPC משתמש במודל לקוח-שרת.
הלקוח קורא לפונקציה מרוחקת על השרת.
השרת מבצע את הפונקציה ומחזיר את התוצאה ללקוח.
